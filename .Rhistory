T5_t_test_ps = c(T5_t_test_ps, T5_t_test_p)
T5_wilcox_test_p = T5_wilcox_test_p/500.0
T5_wilcox_test_ps = c(T5_wilcox_test_ps, T5_wilcox_test_p)
}
print(c(length(normal_t_test_ps), length(normal_wilcox_test_ps), length(T5_t_test_ps), length(T5_wilcox_test_ps)))
print(c(dim(n_t_ps), dim(n_W_ps), dim(T_t_ps), dim(T_W_ps)))
print(k)
n_t_ps[k,] = normal_t_test_ps
n_W_ps[k,] = normal_wilcox_test_ps
T_t_ps[k,] = T5_t_test_ps
T_W_ps[k,] = T5_wilcox_test_ps
}
return_list = list('normal_wilcox' = n_W_ps, 'normal_t_test' = n_t_ps, 'T5_wilcox' = T_w_ps, 'T5_t_test' = T_t_ps)
return(return_list)
}
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
results = compare_tests(deltas, ns)
sim_data = function(delta, dist_type, sample_size) {
if (dist_type == 'Normal'){
xs = rnorm(sample_size, mean = 0, sd=1)
ys = rnorm(sample_size, mean = delta, sd = 1)
}
else if (dist_type == "T5"){
xs = rt(sample_size, df = 5)
ys = rt(sample_size, df = 5, ncp = delta)
}
sim_data = list("xs" = xs, "ys" = ys)
return(sim_data)
}
compare_tests = function(deltas, sample_sizes){
n_t_ps = array(0, c(length(sample_sizes), length(deltas)))
n_W_ps = array(0, c(length(sample_sizes), length(deltas)))
T_t_ps = array(0, c(length(sample_sizes), length(deltas)))
T_W_ps = array(0, c(length(sample_sizes), length(deltas)))
for (k in 1:length(sample_sizes)){
n = sample_sizes[k]
normal_t_test_ps = c()
normal_wilcox_test_ps = c()
T5_t_test_ps = c()
T5_wilcox_test_ps = c()
for (j in 1:length(deltas)){
delta = deltas[j]
normal_t_test_p = 0
normal_wilcox_test_p = 0
T5_t_test_p = 0
T5_wilcox_test_p = 0
for (i in 1:500){
normal_results = sim_data(delta, 'Normal', n)
T5_results = sim_data(delta, "T5", n)
if (wilcox.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_wilcox_test_p = normal_wilcox_test_p + 1
}
if (t.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_t_test_p = normal_t_test_p + 1
}
if (wilcox.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_wilcox_test_p = T5_wilcox_test_p + 1
}
if (t.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_t_test_p = T5_t_test_p + 1
}
}
normal_t_test_p = normal_t_test_p/500.0
normal_t_test_ps = c(normal_t_test_ps, normal_t_test_p)
normal_wilcox_test_p = normal_wilcox_test_p/500.0
normal_wilcox_test_ps = c(normal_wilcox_test_ps, normal_wilcox_test_p)
T5_t_test_p = T5_t_test_p/500.0
T5_t_test_ps = c(T5_t_test_ps, T5_t_test_p)
T5_wilcox_test_p = T5_wilcox_test_p/500.0
T5_wilcox_test_ps = c(T5_wilcox_test_ps, T5_wilcox_test_p)
}
print(c(length(normal_t_test_ps), length(normal_wilcox_test_ps), length(T5_t_test_ps), length(T5_wilcox_test_ps)))
print(c(dim(n_t_ps), dim(n_W_ps), dim(T_t_ps), dim(T_W_ps)))
print(k)
n_t_ps[k,] = normal_t_test_ps
n_W_ps[k,] = normal_wilcox_test_ps
T_t_ps[k,] = T5_t_test_ps
T_W_ps[k,] = T5_wilcox_test_ps
}
return_list = list('normal_wilcox' = n_W_ps, 'normal_t_test' = n_t_ps, 'T5_wilcox' = T_W_ps, 'T5_t_test' = T_t_ps)
return(return_list)
}
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
results = compare_tests(deltas, ns)
restuls
results
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
qplot(x = deltas, y = results$T5_t_test[1])
qplot(x = deltas, y = results$T5_t_test[1,])
qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
ggplot(data = results)
p = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
p
for (in 2:length(deltas)){}
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return plot
}
make_plots
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots
plot
print(plot)
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot = plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
plot
}
make_plots
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot = plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
plot
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
return(plot)
}
make_plots()
make_plots = function(){
plot = ggplot(x = deltas, y = results$T5_t_test[1,], geom='line')
return(plot)
}
make_plots()
plot = ggplot(x = deltas, y = results$T5_t_test[1,], geom='line')
ggplot(x = deltas, y = results$T5_t_test[1,], geom='line')
sim_data = function(delta, dist_type, sample_size) {
if (dist_type == 'Normal'){
xs = rnorm(sample_size, mean = 0, sd=1)
ys = rnorm(sample_size, mean = delta, sd = 1)
}
else if (dist_type == "T5"){
xs = rt(sample_size, df = 5)
ys = rt(sample_size, df = 5, ncp = delta)
}
sim_data = list("xs" = xs, "ys" = ys)
return(sim_data)
}
compare_tests = function(deltas, sample_sizes){
n_t_ps = array(0, c(length(sample_sizes), length(deltas)))
n_W_ps = array(0, c(length(sample_sizes), length(deltas)))
T_t_ps = array(0, c(length(sample_sizes), length(deltas)))
T_W_ps = array(0, c(length(sample_sizes), length(deltas)))
for (k in 1:length(sample_sizes)){
n = sample_sizes[k]
normal_t_test_ps = c()
normal_wilcox_test_ps = c()
T5_t_test_ps = c()
T5_wilcox_test_ps = c()
for (j in 1:length(deltas)){
delta = deltas[j]
normal_t_test_p = 0
normal_wilcox_test_p = 0
T5_t_test_p = 0
T5_wilcox_test_p = 0
for (i in 1:500){
normal_results = sim_data(delta, 'Normal', n)
T5_results = sim_data(delta, "T5", n)
if (wilcox.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_wilcox_test_p = normal_wilcox_test_p + 1
}
if (t.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_t_test_p = normal_t_test_p + 1
}
if (wilcox.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_wilcox_test_p = T5_wilcox_test_p + 1
}
if (t.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_t_test_p = T5_t_test_p + 1
}
}
normal_t_test_p = normal_t_test_p/500.0
normal_t_test_ps = c(normal_t_test_ps, normal_t_test_p)
normal_wilcox_test_p = normal_wilcox_test_p/500.0
normal_wilcox_test_ps = c(normal_wilcox_test_ps, normal_wilcox_test_p)
T5_t_test_p = T5_t_test_p/500.0
T5_t_test_ps = c(T5_t_test_ps, T5_t_test_p)
T5_wilcox_test_p = T5_wilcox_test_p/500.0
T5_wilcox_test_ps = c(T5_wilcox_test_ps, T5_wilcox_test_p)
}
print(c(length(normal_t_test_ps), length(normal_wilcox_test_ps), length(T5_t_test_ps), length(T5_wilcox_test_ps)))
print(c(dim(n_t_ps), dim(n_W_ps), dim(T_t_ps), dim(T_W_ps)))
print(k)
n_t_ps[k,] = normal_t_test_ps
n_W_ps[k,] = normal_wilcox_test_ps
T_t_ps[k,] = T5_t_test_ps
T_W_ps[k,] = T5_wilcox_test_ps
}
return_list = list('normal_wilcox' = n_W_ps, 'normal_t_test' = n_t_ps, 'T5_wilcox' = T_W_ps, 'T5_t_test' = T_t_ps)
return(return_list)
}
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
results = compare_tests(deltas, ns)
results
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
pallete()
(pal = palette())
10%3
10 % 3
10 %% 3
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
results$T5_t_test
length(deltas)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
warnings()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[length(pal)%%i])
}
return(plot)
}
make_plots()
(pal = palette())
length(pal)
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type='--', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type="o", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[1,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], type="l", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
results$T5_W_test
restuls
results
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
lines(x = deltas, y = results$T5_wilcox[i,], lty=2)
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = i)
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = i)
}
return(plot)
}
make_plots()
---
?signalCondition
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sum_stats_results[,'W_hare']
sum_stats_results[,'W_hare']+sum_stats_results[,'W_tortoise']
sum_stats_results[,'U_hare']+sum_stats_results[,'U_tortoise']
str(d)
str(d[which(d$variable == 'U_hare'),])
str(d[which(d$variable == 'U_tortoise'),])
d[which(d$variable == 'U_tortoise'),value]
d[which(d$variable == 'U_tortoise'),'value']
d[which(d$variable == 'U_tortoise'),'value'] == (100 - d[which(d$variable == 'U_hare'),'value'])
d[which(d$variable == 'W_tortoise'),'value'] == (210 - d[which(d$variable == 'W_hare'),'value'])
hist(sum_stats_results)
hist.data.frame(sum_stats_results)
?hist.data.frame
### (d) Histograms of sampling distributions of statistics
library(Hmisc)
install.packages("Hmisc")
hist.data.frame(sum_stats_results)
library(Hmisc)
hist.data.frame(sum_stats_results)
library(ggplot2)
d <- melt(sum_stats_results, measure.vars = c('diff_means', 't_stat', 'U_hare', 'U_tortoise', 'z_stat', 'W_hare', "W_tortoise"))
ggplot(d,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram(bins = 20)
p_val_calc = function(feature, obs_value){
#Args: feature - stat in sum_stats_result to find p-value for
#      obs_value - observed value of statistic in t_and_h (sample)
#Returns: p-value for stat
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] >= obs_value), feature])/3000.0
if (half_p_val > 0.5){
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] >= obs_value), feature])/3000.0
}
return(2*half_p_val)
}
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] >= obs_value), feature])/3000.0
if (half_p_val > 0.5){
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] <= obs_value), feature])/3000.0
}
return(2*half_p_val)
p_val_calc = function(feature, obs_value){
#Args: feature - stat in sum_stats_result to find p-value for
#      obs_value - observed value of statistic in t_and_h (sample)
#Returns: p-value for stat
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] >= obs_value), feature])/3000.0
if (half_p_val > 0.5){
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] <= obs_value), feature])/3000.0
}
return(2*half_p_val)
p_val_calc = function(feature, obs_value){
#Args: feature - stat in sum_stats_result to find p-value for
#      obs_value - observed value of statistic in t_and_h (sample)
#Returns: p-value for stat
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] >= obs_value), feature])/3000.0
if (half_p_val > 0.5){
half_p_val = length(sum_stats_results[which(sum_stats_results[,feature] <= obs_value), feature])/3000.0
}
return(2*half_p_val)
}
d <- melt(sum_stats_results, measure.vars = c('diff_means', 't_stat', 'U_hare', 'U_tortoise', 'z_stat', 'W_hare', "W_tortoise"))
ggplot(d,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram(bins=30)
library(ggplot2)
d <- melt(sum_stats_results, measure.vars = c('diff_means', 't_stat', 'U_hare', 'U_tortoise', 'z_stat', 'W_hare', "W_tortoise"))
ggplot(d,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram(bins=20)
